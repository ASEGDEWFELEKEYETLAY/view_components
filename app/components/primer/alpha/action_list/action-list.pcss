/* <ul> */
.ActionList {
  padding: var(--base-size-8);
}

/* full bleed */
.ActionList--full {
  padding: 0;
}

/* nested list within main ActionList */
.ActionList--subGroup {
  padding: 0;
}

/* dividers */

.ActionList--divided {
  & .ActionListItem-label::before {
    position: absolute;
    top: calc(-1 * var(--base-size-6));
    display: block;
    width: 100%;
    height: 1px;
    content: '';
    background: var(--color-action-list-item-inline-divider);
  }

  /* if descriptionWrap--inline exists, move pseudo divider to wrapper */
  & .ActionListItem-descriptionWrap--inline {
    &::before {
      position: absolute;
      top: calc(-1 * var(--base-size-6));
      display: block;
      width: 100%;
      height: var(--primer-borderWidth-thin);
      content: '';
      background: var(--color-action-list-item-inline-divider);
    }

    /* unset the default label pseudo */
    & .ActionListItem-label::before {
      content: unset;
    }
  }

  /* hide divider if item is active */
  & .ActionListItem--navActive {
    & .ActionListItem-label::before,
    + .ActionListItem .ActionListItem-label::before {
      visibility: hidden;
    }
  }
}

/* hide if item is first of type with label::before, or is the first item after a sectionDivider */
.ActionListItem:first-of-type .ActionListItem-label::before,
.ActionList-sectionDivider + .ActionListItem .ActionListItem-label::before {
  visibility: hidden;
}

/* hide if item is first of type with label::before, or is the first item after a sectionDivider */
.ActionListItem:first-of-type .ActionListItem-descriptionWrap--inline::before,
.ActionList-sectionDivider + .ActionListItem .ActionListItem-descriptionWrap--inline::before {
  visibility: hidden;
}

/* ActionList::Item */

/* Divider behavior */

.ActionListItem {
  /* hide dividers  */
  @media (hover: hover) {
    &:hover {
      & .ActionListItem-label::before,
      & + .ActionListItem .ActionListItem-label::before {
        visibility: hidden;
      }

      & .ActionListItem-descriptionWrap--inline::before,
      & + .ActionListItem .ActionListItem-descriptionWrap--inline::before {
        visibility: hidden;
      }
    }
  }

  /* Make sure that the first visible item isn't a divider */
  &[hidden] + .ActionList-sectionDivider {
    display: none;
  }
}

/* Sub items */

.ActionListItem {
  /* target contents of li if sub-item (li wraps item label + nested ul) */
  /* collapse styles here */
  &.ActionListItem--hasSubItem {
    /* first child */
    & > .ActionListContent {
      z-index: 1;

      @media (hover: hover) {
        &:hover {
          background-color: var(--color-action-list-item-default-hover-bg);
        }
      }

      &:active {
        background-color: var(--color-action-list-item-default-active-bg);
      }
    }
  }
}

/* <li> */
.ActionListItem {
  position: relative;
  list-style: none;
  background-color: transparent;
  border-radius: var(--primer-borderRadius-medium, 6px);

  &:hover,
  &:active {
    cursor: pointer;
  }

  /* only hover li without list as children */
  &:not(.ActionListItem--hasSubItem),
   /* target contents of first child li if sub-item (li wraps item label + nested ul) */
  &.ActionListItem--hasSubItem > .ActionListContent {
    @media (hover: hover) {
      &:hover {
        cursor: pointer;
        background-color: var(--color-action-list-item-default-hover-bg);

        &:not(.ActionListItem--navActive) {
          /* Support for "Windows high contrast mode" */
          outline: solid var(--primer-borderWidth-thin, 1px) transparent;
          outline-offset: calc(-1 * var(--primer-borderWidth-thin, 1px));
          box-shadow: var(--primer-borderInset-thin, 1px) var(--color-action-list-item-default-active-border);
        }
      }
    }

    &:active {
      background: var(--color-action-list-item-default-active-bg);

      &:not(.ActionListItem--navActive) {
        /* Support for "Windows high contrast mode" https:sarahmhigley.com/writing/whcm-quick-tips/ */
        outline: solid var(--primer-borderWidth-thin, 1px) transparent;
        outline-offset: calc(-1 * var(--primer-borderWidth-thin, 1px));
        box-shadow: var(--primer-borderInset-thin, 1px) var(--color-action-list-item-default-active-border);
      }

      @media screen and (prefers-reduced-motion: no-preference) {
        animation: ActionListItem-active-bg 4s forwards cubic-bezier(0.33, 1, 0.68, 1);
      }

      @keyframes ActionListItem-active-bg {
        50% {
          box-shadow: inset 0 2px 12px 6px rgba(var(--color-canvas-default), 0.4);
          transform: scale(1);
        }

        100% {
          transform: scale(0.97);
        }
      }
    }

    &:active {
      & .ActionListItem-label::before,
      & + .ActionListItem .ActionListItem-label::before {
        visibility: hidden;
      }
    }
  }

  /* Autocomplete [aria-selected] items */

  &[aria-selected='true'] {
    font-weight: var(--base-text-weight-normal, 400);
    background: var(--color-action-list-item-default-selected-bg);

    @media (hover: hover) {
      &:hover {
        background-color: var(--color-action-list-item-default-hover-bg);
      }
    }

    &::before,
    & + .ActionListItem::before {
      visibility: hidden;
    }

    /* blue accent line
    &::after {
      @include activeIndicatorLine(-$spacer-1);
    } */
  }

  /* active state [aria-current] */

  &.ActionListItem--navActive {
    &:not(.ActionListItem--subItem) {
      .ActionListItem-label {
        font-weight: var(--base-text-weight-semibold, 600);
      }
    }

    &:not(.ActionListItem--danger) {
      background: var(--color-action-list-item-default-selected-bg);

      @media (hover: hover) {
        &:hover {
          background-color: var(--color-action-list-item-default-hover-bg);
        }
      }

      &::before,
      & + .ActionListItem::before {
        visibility: hidden;
      }

      /* blue accent line  */
      &::after {
        @mixin activeIndicatorLine;
      }
    }
  }

  /* disabled */
  &[aria-disabled='true'] {
    & .ActionListContent {
      & .ActionListItem-label,
      & .ActionListItem-description {
        color: var(--color-primer-fg-disabled);
      }

      & .ActionListItem-visual {
        fill: var(--color-primer-fg-disabled);
      }
    }

    @media (hover: hover) {
      &:hover {
        cursor: not-allowed;
        background-color: transparent;
      }
    }
  }

  /* variants */

  /* danger */
  &.ActionListItem--danger {
    & .ActionListItem-label {
      color: var(--color-danger-fg);
    }

    & .ActionListItem-visual {
      color: var(--color-danger-fg);
    }

    @media (hover: hover) {
      &:hover {
        background: var(--color-action-list-item-danger-hover-bg);

        & .ActionListItem-label {
          color: var(--color-action-list-item-danger-hover-text);
        }
      }
    }

    & .ActionListContent {
      &:active {
        background: var(--color-action-list-item-danger-active-bg);
      }
    }
  }

  /* if nested list exists, remove default padding */
  & .ActionList {
    padding: unset;
  }
}

/* button or a href */
.ActionListContent {
  position: relative;
  display: grid;
  width: 100%;
  padding-block: var(--primer-control-medium-paddingBlock, calc((2rem - 1.25rem) / 2));
  padding-inline: var(--primer-control-medium-paddingInline-condensed, 8px);
  color: var(--color-fg-default);
  text-align: left;
  user-select: none;
  background-color: transparent;
  border: none;
  border-radius: var(--primer-borderRadius-medium, 6px);
  transition: background 33.333ms linear;
  touch-action: manipulation;
  -webkit-tap-highlight-color: transparent;
  grid-template-rows: min-content;
  grid-template-areas: 'leadingAction leadingVisual label trailingVisual trailingAction';
  grid-template-columns: min-content min-content minmax(0, auto) min-content min-content;
  align-items: start;

  /* column-gap persists with empty grid-areas, margin applies only when children exist */
  & > :not(:last-child) {
    margin-right: var(--primer-control-medium-gap, 8px);
  }

  /* state */

  &:hover {
    text-decoration: none;
  }

  &:focus {
    /* @mixin focusOutline; */

    /* remove fallback :focus if :focus-visible is supported */
    &:not(:focus-visible) {
      outline: solid 1px transparent;
    }
  }

  /* default focus state */
  &:focus-visible {
    /* @mixin focusOutline; */
  }

  /* disabled */
  &[aria-disabled='true'] {
    & .ActionListItem-label,
    & .ActionListItem-description {
      color: var(--color-primer-fg-disabled);
    }

    & .ActionListItem-visual {
      fill: var(--color-primer-fg-disabled);
    }

    @media (hover: hover) {
      &:hover {
        cursor: not-allowed;
        background-color: transparent;
      }
    }
  }

  /* collapsible item [aria-expanded] */

  /* nesting (single level)
   target items inside expanded subgroups */
  &[aria-expanded] {
    + & .ActionList--subGroup {
      @media screen and (prefers-reduced-motion: no-preference) {
        transition: opacity 160ms cubic-bezier(0.25, 1, 0.5, 1), transform 160ms cubic-bezier(0.25, 1, 0.5, 1);
      }

      & .ActionListContent {
        padding-left: var(--base-size-24, 24px);
      }
    }

    /* has 16px leading visual */
    &.ActionListContent--visual16 + .ActionList--subGroup {
      & .ActionListContent {
        padding-left: var(--base-size-32, 32px);
      }
    }

    /* has 20px leading visual */
    &.ActionListContent--visual20 + .ActionList--subGroup {
      & .ActionListContent {
        /* padding-left: $spacer-2 * 4.5;  36px */
      }
    }

    /* has 24px leading visual */
    &.ActionListContent--visual24 + .ActionList--subGroup {
      & .ActionListContent {
        padding-left: var(--base-size-40, 40px);
      }
    }
  }

  &[aria-expanded='true'] {
    & .ActionListItem-collapseIcon {
      transition: transform 120ms linear;
      transform: scaleY(-1);
    }

    & + .ActionList--subGroup {
      height: auto;
      overflow: visible;
      visibility: visible;
      opacity: 1;
      transform: translateY(0);
    }

    &.ActionListContent--hasActiveSubItem {
      & > .ActionListItem-label {
        font-weight: var(--base-text-weight-semibold, 600);
      }
    }
  }

  &[aria-expanded='false'] {
    & .ActionListItem-collapseIcon {
      transition: transform 120ms linear;
      transform: scaleY(1);
    }

    & + .ActionList--subGroup {
      height: 0;
      overflow: hidden;
      visibility: hidden;
      opacity: 0;
      transform: translateY(-calc(-1 * var(--base-size-16, 16px)));
    }

    /* show active indicator on parent collapse if child is active */
    &.ActionListContent--hasActiveSubItem {
      background: var(--color-action-list-item-default-selected-bg);

      & .ActionListItem-label {
        font-weight: var(--base-text-weight-semibold, 600);
      }

      &::before,
      + .ActionListItem::before {
        visibility: hidden;
      }

      /* blue accent line */
      &::after {
        @mixin activeIndicatorLine;
      }
    }
  }

  /* sizes */

  &.ActionListContent--sizeLarge {
    padding-block: var(--primer-control-large-paddingBlock, calc((2.5rem - 1.25rem) / 2));
  }

  &.ActionListContent--sizeXLarge {
    padding-block: var(--primer-control-xlarge-paddingBlock, calc((3rem - 1.25rem) / 2));
  }

  &.ActionListContent--fontSmall {
    font-size: var(--primer-text-body-size-small, 12px);
  }

  /* On pointer:coarse (mobile), all list items are large */
  @media (pointer: coarse) {
    padding-block: var(--primer-control-large-paddingBlock, calc((2.5rem - 1.25rem) / 2));
  }

  &.ActionListContent--blockDescription {
    /* if leading/trailing visual, align with first line of content */
    & .ActionListItem-visual {
      place-self: start;
    }
  }
}

/* place children on grid */

.ActionListItem-action--leading {
  grid-area: leadingAction;
}

.ActionListItem-visual--leading {
  grid-area: leadingVisual;
}

.ActionListItem-label {
  grid-area: label;
}

.ActionListItem-visual--trailing {
  grid-area: trailingVisual;
}

.ActionListItem-action--trailing {
  grid-area: trailingAction;
}

/* wrapper span
 default block */
.ActionListItem-descriptionWrap {
  grid-area: label;
  display: flex;
  flex-direction: column;
  gap: var(--base-size-4, 4px);

  & .ActionListItem-label {
    font-weight: var(--base-text-weight-semibold, 600);
  }
}

/* inline */
.ActionListItem-descriptionWrap--inline {
  position: relative;
  flex-direction: row;
  align-items: baseline;
  gap: var(--base-size-8, 8px);
}

/* description */
.ActionListItem-description {
  font-size: var(--primer-text-body-size-small, 12px);
  font-weight: var(--base-text-weight-normal, 400);
  line-height: var(--primer-text-body-lineHeight-small, calc(20 / 12));
  color: var(--color-fg-muted);
}

/* helper for grid alignment with multi-line content
 span wrapping svg or text */
.ActionListItem-visual,
.ActionListItem-action {
  display: flex;
  min-height: var(--primer-control-medium-lineBoxHeight, 20px);
  color: var(--color-fg-muted);
  pointer-events: none;
  fill: var(--color-fg-muted);
  align-items: center;
}

/* text */
.ActionListItem-label {
  position: relative;
  font-size: var(--primer-text-body-size-medium, 14px);
  font-weight: var(--base-text-weight-normal, 400);
  line-height: var(--primer-text-body-lineHeight-medium, calc(20 / 14));
  color: var(--color-fg-default);
}

.ActionListItem-label--truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* nested lists (only supports 1 level currently)
 target ActionListItem--subItem for padding-left to maintain :active :after state */

/* TODO: remove with PVC implementation */
.ActionListItem--subItem > .ActionListContent {
  font-size: var(--primer-text-body-size-small, 12px);
}

.ActionListItem-trailingAction {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}

.ActionListItem-trailingAction--onHover {
  visibility: hidden;

  &:hover,
  &:focus-within {
    & .ActionListItem-trailingAction {
      visibility: visible;
    }
  }
}

.ActionListItem--withActions {
  display: flex;
  flex-wrap: nowrap;
  align-items: center;
}

/* notes to katie
 offer hover prop for leading/trailing action
 button styles
 sub-group items etc etc
 action button height set per size option
 move single and multi select to own component */
